#!/bin/bash\n# Esempio di utilizzo di set -o pipefail\n\necho \"Questo script dimostra l\'effetto di \'set -o pipefail\'.\"\necho \"Normalmente, il codice di uscita di una pipeline è quello dell'ultimo comando.\"\necho \"Con \'pipefail\', la pipeline restituisce l'errore del primo comando che fallisce.\"\necho \"\"\n\necho \"--- Esempio SENZA pipefail ---\"\n# In questo caso, \'echo \$?\' stamperà 0 perché \'grep\' è l'ultimo comando\n# e ha successo (anche se \'comando_inesistente\' fallisce).\ncomando_inesistente | echo \"Pipeline completata\" # comando_inesistente fallirà\necho \"Codice di uscita della pipeline: $? (dovrebbe essere 0 se pipefail non è attivo)\"\n\necho \"\"\necho \"--- Esempio CON pipefail ---\"\nset -o pipefail\n\necho \"Eseguo: comando_inesistente | echo \\\"Pipeline con pipefail\\\"\"\ncomando_inesistente | echo \"Pipeline con pipefail\" # comando_inesistente fallirà\n# Con pipefail, il codice di uscita sarà quello di 'comando_inesistente' (diverso da 0)\necho \"Codice di uscita della pipeline con pipefail: $? (dovrebbe essere > 0)\"\n\necho \"\"\necho \"Altro esempio con pipefail: ls | comando_inesistente_2 | wc -l\"\nls /tmp | comando_inesistente_2 | wc -l # comando_inesistente_2 fallirà\necho \"Codice di uscita della pipeline lunga con pipefail: $? (dovrebbe essere > 0)\"\n\n\n# Ripristina il comportamento predefinito (opzionale, per il resto dello script se ci fosse)\nset +o pipefail\necho \"\"\necho \"Pipefail disattivato.\"\necho \"Fine dello script.\"\n\n# Nota: Per vedere l'effetto, esegui lo script.\n# Osserva come cambia il codice di uscita ($?) con e senza 'set -o pipefail'.\n
